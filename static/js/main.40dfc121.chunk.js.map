{"version":3,"sources":["Redux/store/news/news.actions.ts","Components/NewsBox/NewsBox.tsx","Components/NewsCatalog/NewsCatalog.tsx","Components/NewsFilter/NewsFilter.tsx","Pages/NewsPage/NewsPage.tsx","Redux/store/news/news.reducer.ts","Redux/index.ts","services/news.ts","services/getDate.ts","Redux/store/news/news.sagas.ts","shared/constants/user-from-view-mode.enum.ts","Components/NewsForm/NewsFormRender/NewsFormUseStyles.tsx","Components/NewsForm/NewsFormRender/NewsFormRender.tsx","Components/NewsForm/NewsForm.tsx","Components/ModalWindow/ModalWindow.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ActionTypes","setCountNewsID","amount","type","payload","toggleModalNews","status","NewsBox","item","dispatch","handleClickEdit","id","setChosenItem","handleClickRemove","removeItemByID","Box","component","className","Avatar","variant","alt","title","src","url","Typography","gutterBottom","date","explanation","onClick","connect","state","catalogNews","news","List","length","map","index","key","Button","color","useEffect","currentDate","Date","useState","stateValue","setStateValue","handlerInputFilter","e","value","target","Toolbar","InputBase","placeholder","onInput","NewsPage","initialState","reserveCatalogNews","countNewsID","modalNewsToggle","chosenNews","combineReducers","action","chosenItem","find","filter","indexNews","findIndex","slice","currentFilterNews","toLowerCase","indexOf","emptyFilter","axios","require","apiKey","ServiceNews","getNews","a","get","response","data","console","log","getCatalogNews","getDate","objectDate","year","getFullYear","mouth","getMonth","day","newsSaga","actions","reverse","put","error","takeEvery","NewsFormModes","NewsFormButtons","useStyles","makeStyles","theme","createStyles","root","NewsFormRender","classes","name","label","TextField","disabled","NewsForm","idNews","editStatus","EditNews","initialValues","onSubmit","values","itemNews","AddNews","addNewsInCatalog","stopPropagation","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","composeWithDevTools","trace","traceLimit","applyMiddleware","run","App","ScopedCssBaseline","AppBar","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.40dfc121.chunk.js","sourcesContent":["import { newsInterface } from \"./../../InterfacesEntity/news.interface\"\nimport { Action } from \"../../interfacesAction/action.interface\"\n\nexport const ActionTypes = {\n  GET_NEWS: \"[News] Get news\",\n  SET_NEWS_IN_STORE: \"[News] Set news in store\",\n  SET_COUNT_NEWS_ID: \"[News] Set count news id\",\n\n  TOGGLE_MODAL_NEWS: \"[News] Toggle modal news\",\n  SET_CHOSEN_ITEM: \"[News] Set chosen item\",\n  REMOVE_ITEM_BY_ID: \"[News] Set item by id\",\n\n  EDIT_NEWS_BY_ID: \"[News] Edit news by id\",\n  ADD_NEWS_IN_CATALOG: \"[News] Add news in catalog\",\n\n  SET_CURRENT_FILTER_NEWS: \"[News] Set current filter news\",\n  SET_EMPTY_FILTER_NEWS: \"[News] Set empty filter news\",\n\n  GET_FAILURE: \"[getFailure] Get failure\",\n}\n\nexport const getNews = (currentDate: Date): Action<Date> => ({\n  type: ActionTypes.GET_NEWS,\n  payload: currentDate,\n})\n\nexport const setNewsInStore = (\n  arrayNews: newsInterface\n): Action<newsInterface> => ({\n  type: ActionTypes.SET_NEWS_IN_STORE,\n  payload: arrayNews,\n})\n\nexport const setCountNewsID = (amount: number): Action<number> => ({\n  type: ActionTypes.SET_COUNT_NEWS_ID,\n  payload: amount,\n})\n\nexport const toggleModalNews = (status: string | null): Action<any> => ({\n  type: ActionTypes.TOGGLE_MODAL_NEWS,\n  payload: status,\n})\n\nexport const setChosenItem = (id: number): Action<number> => ({\n  type: ActionTypes.SET_CHOSEN_ITEM,\n  payload: id,\n})\n\nexport const removeItemByID = (id: number): Action<number> => ({\n  type: ActionTypes.REMOVE_ITEM_BY_ID,\n  payload: id,\n})\n\nexport const editNewsByID = (\n  itemNews: newsInterface\n): Action<newsInterface> => ({\n  type: ActionTypes.EDIT_NEWS_BY_ID,\n  payload: itemNews,\n})\n\nexport const addNewsInCatalog = (\n  itemNews: newsInterface\n): Action<newsInterface> => ({\n  type: ActionTypes.ADD_NEWS_IN_CATALOG,\n  payload: itemNews,\n})\n\nexport const setCurrentFilterNews = (value: string): Action<string> => ({\n  type: ActionTypes.SET_CURRENT_FILTER_NEWS,\n  payload: value,\n})\n\nexport const setEmptyFilterNews = (): Action<any> => ({\n  type: ActionTypes.SET_EMPTY_FILTER_NEWS,\n})\n\nexport const getFailureAction = (error?: any): Action<any> => ({\n  type: ActionTypes.GET_FAILURE,\n  payload: error,\n})\n","import React from \"react\"\nimport { Box, Avatar, Typography } from \"@material-ui/core\"\nimport EditIcon from \"@material-ui/icons/Edit\"\nimport CloseIcon from \"@material-ui/icons/Close\"\nimport { newsInterface } from \"../../Redux/InterfacesEntity/news.interface\"\nimport {\n  toggleModalNews,\n  setChosenItem,\n  removeItemByID,\n} from \"../../Redux/store/news/news.actions\"\n\ntype NewsBoxProps = {\n  item: newsInterface,\n  dispatch: any,\n}\n\nconst NewsBox: React.FunctionComponent<NewsBoxProps> = ({ item, dispatch }) => {\n  const handleClickEdit = (id: number) => {\n    dispatch(toggleModalNews(\"Edit News\"))\n    dispatch(setChosenItem(id))\n  }\n\n  const handleClickRemove = (id: number) => {\n    dispatch(removeItemByID(id))\n  }\n\n  return (\n    <Box component={\"div\"} className={\"news-box\"}>\n      <Box component={\"div\"} className={\"news-box__image-container\"}>\n        <Avatar\n          className={\"news-box__image-item\"}\n          variant={\"rounded\"}\n          alt={item.title}\n          src={item.url}\n        />\n      </Box>\n      <Box component={\"div\"} className={\"news-box__description-container\"}>\n        <Box component={\"div\"} className={\"news-box__description-header\"}>\n          <Typography className={\"news-box__title\"} variant=\"h6\" gutterBottom>\n            {item.title}\n          </Typography>\n          <Typography className={\"news-box__date\"} variant=\"h6\" gutterBottom>\n            {item.date}\n          </Typography>\n        </Box>\n        <Box component={\"div\"} className={\"news-box__description-main\"}>\n          <Typography variant=\"body2\" gutterBottom>\n            {item.explanation}\n          </Typography>\n        </Box>\n        <Box component={\"div\"} className={\"edit-tools edit-tools_right\"}>\n          <EditIcon\n            onClick={() => {\n              handleClickEdit(item.id)\n            }}\n          />\n          <CloseIcon\n            onClick={() => {\n              handleClickRemove(item.id)\n            }}\n          />\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default NewsBox\n","import React from \"react\"\nimport { Box, List, Typography, Button } from \"@material-ui/core\"\nimport { connect } from \"react-redux\"\nimport NewsBox from \"../NewsBox/NewsBox\"\nimport { newsInterface } from \"../../Redux/InterfacesEntity/news.interface\"\nimport { toggleModalNews } from \"../../Redux/store/news/news.actions\"\n\ntype NewsCatalogProps = {\n  catalogNews: [newsInterface],\n  dispatch: any,\n}\n\nconst NewsCatalog: React.FunctionComponent<NewsCatalogProps> = ({\n  catalogNews,\n  dispatch,\n}) => {\n  const handleClickAddItem = () => {\n    dispatch(toggleModalNews(\"Add News\"))\n  }\n  return (\n    <Box component={\"div\"} className={\"news-catalog-container\"}>\n      <List className={\"news-list\"}>\n        {catalogNews &&\n          catalogNews.length &&\n          catalogNews.map((item: newsInterface, index: number) => (\n            <NewsBox key={index + 1} item={item} dispatch={dispatch} />\n          ))}\n      </List>\n      <Box\n        component={\"div\"}\n        className={\"news-catalog-container__tools-container\"}\n      >\n        <Button\n          onClick={() => handleClickAddItem()}\n          className={\"button button_max\"}\n          variant={\"contained\"}\n          color={\"primary\"}\n        >\n          <Typography className={\"button__name\"} variant=\"button\">\n            {\"ADD NEWS\"}\n          </Typography>\n        </Button>\n      </Box>\n    </Box>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  catalogNews: state.news.catalogNews,\n})\n\nexport default connect(mapStateToProps)(NewsCatalog)\n","import React, { useEffect, useState } from \"react\"\nimport { Box, Toolbar, InputBase } from \"@material-ui/core\"\nimport SearchIcon from \"@material-ui/icons/Search\"\nimport { connect } from \"react-redux\"\nimport {\n  getNews,\n  setCurrentFilterNews,\n  setEmptyFilterNews,\n} from \"../../Redux/store/news/news.actions\"\n\ntype NewsFilterProps = {\n  dispatch: any,\n}\n\nconst NewsFilter: React.FunctionComponent<NewsFilterProps> = ({ dispatch }) => {\n  useEffect(() => {\n    dispatch(getNews(new Date(\"2020-12-01\")))\n  }, [dispatch])\n\n  const [stateValue, setStateValue] = useState(\"\")\n  const handlerInputFilter = (e: any) => {\n    setStateValue(e.target.value)\n    if (e.target.value.length > 1)\n      dispatch(setCurrentFilterNews(e.target.value))\n    else dispatch(setEmptyFilterNews())\n  }\n\n  return (\n    <Box component={\"div\"} className={\"news-filter-container\"}>\n      <Toolbar>\n        <SearchIcon />\n        <InputBase\n          value={stateValue}\n          placeholder={\"it is filter\"}\n          onInput={(e) => handlerInputFilter(e)}\n        />\n      </Toolbar>\n    </Box>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({})\n\nexport default connect(mapStateToProps)(NewsFilter)\n","import { Box } from \"@material-ui/core\"\nimport React from \"react\"\nimport NewsCatalog from \"../../Components/NewsCatalog/NewsCatalog\"\nimport NewsFilter from \"../../Components/NewsFilter/NewsFilter\"\n\nconst NewsPage: React.FunctionComponent = () => {\n  return (\n    <Box className={\"news-page\"}>\n      <NewsFilter />\n      <NewsCatalog />\n    </Box>\n  )\n}\n\nexport default NewsPage\n","import { newsInterface } from './../../InterfacesEntity/news.interface';\nimport { ActionTypes } from \"./news.actions\"\nimport { Action } from \"../../interfacesAction/action.interface\"\n\nexport interface State {  \n  catalogNews: [newsInterface];\n  reserveCatalogNews: [newsInterface];\n  countNewsID: number;\n  modalNewsToggle: string | null;\n  chosenNews: newsInterface  \n}\n\nconst initialState: State = {    \n  catalogNews: [{} as newsInterface],\n  reserveCatalogNews: [{} as newsInterface],\n  countNewsID: 0,\n  modalNewsToggle: null,\n  chosenNews: {} as newsInterface,\n}\n\nexport const newsReducer = (\n  state: State = initialState,\n  action: Action<any>\n) => {\n  switch (action.type) { \n  case ActionTypes.SET_NEWS_IN_STORE:\n    return {\n      ...state,\n      catalogNews: action.payload,\n      reserveCatalogNews: action.payload\n    }\n  case ActionTypes.SET_COUNT_NEWS_ID:\n    return {\n      ...state,\n      countNewsID: action.payload\n    }\n  case ActionTypes.TOGGLE_MODAL_NEWS:       \n    return {\n      ...state,\n      modalNewsToggle: action.payload\n    }\n  case ActionTypes.SET_CHOSEN_ITEM:\n    const chosenItem = state.catalogNews.find(item=>item.id === action.payload)\n    return {\n      ...state,\n      chosenNews: chosenItem || {} as newsInterface\n    }\n  case ActionTypes.REMOVE_ITEM_BY_ID:    \n    return {\n      ...state,\n      catalogNews: state.catalogNews.filter(item => item.id !== action.payload)\n    }  \n  case ActionTypes.EDIT_NEWS_BY_ID:\n    const indexNews =\n      state.catalogNews.findIndex(item=>item.id === action.payload.id)    \n    return {\n      ...state,\n      catalogNews: [...state.catalogNews.slice(0, indexNews),\n        action.payload, ...state.catalogNews.slice(indexNews+1)]\n    }\n  case ActionTypes.ADD_NEWS_IN_CATALOG:      \n    return {\n      ...state,\n      catalogNews:  [action.payload, ...state.catalogNews]\n    }\n  case ActionTypes.SET_CURRENT_FILTER_NEWS:\n    const currentFilterNews = state.reserveCatalogNews\n      .filter(item=> item.title.toLowerCase().indexOf(action.payload.toLowerCase())!==-1)    \n    return {\n      ...state,      \n      catalogNews:  currentFilterNews,\n    }\n  case ActionTypes.SET_EMPTY_FILTER_NEWS: \n    const emptyFilter =  state.reserveCatalogNews.slice()  \n    return {\n      ...state,\n      catalogNews:emptyFilter,\n    }\n  default:   \n    return state\n  }\n}\n","import { combineReducers } from \"redux\"\n\nimport { newsReducer } from \"./store/news/news.reducer\"\n\nexport default combineReducers({\n  news: newsReducer,\n})\n","const axios = require(\"axios\")\n\nconst apiKey = \"VhPpn50ZBCAiZCbJPSV9uHl1q3XXZuAq8PVDmwMH\"\n\nexport default class ServiceNews {\n  static getNews = async (currentDate: string) => {\n    try {\n      const response = await axios.get(\n        `https://api.nasa.gov/planetary/apod?api_key=${apiKey}&date=${currentDate}`\n      )\n      return response.data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n  static getCatalogNews = async (currentDate: string) => {\n    try {\n      const response = await axios.get(\n        `https://api.nasa.gov/planetary/apod?start_date=${currentDate}&api_key=${apiKey}`\n      )\n      return response.data\n    } catch (e) {\n      console.log(e)\n    }\n  }\n}\n","const getDate = (objectDate: any) => {\n  const year = objectDate.getFullYear()\n  let mouth = objectDate.getMonth() + 1\n  if (mouth < 10) mouth = `0${mouth}`\n  let day = objectDate.getDate()\n  if (day < 10) day = `0${day}`\n  return `${year}-${mouth}-${day}`\n}\n\nexport default getDate\n","import { put, takeEvery } from \"redux-saga/effects\"\nimport {\n  ActionTypes,\n  getFailureAction,\n  setNewsInStore,\n  setCountNewsID,\n} from \"./news.actions\"\nimport ServiceNews from \"../../../services/news\"\nimport getDate from \"../../../services/getDate\"\nimport { newsInterface } from \"./../../InterfacesEntity/news.interface\"\n\nfunction* getCatalogNews(actions: any) {\n  try {\n    const response = yield ServiceNews.getCatalogNews(getDate(actions.payload))\n    const catalogNews = yield response\n      .map((item: newsInterface, index: number) => {\n        return {\n          title: item.title,\n          date: item.date,\n          explanation: item.explanation,\n          url: item.url,\n          id: index + 1,\n        }\n      })\n      .reverse()\n    yield put(setNewsInStore(catalogNews))\n    yield put(setCountNewsID(catalogNews.length))\n  } catch (e) {\n    yield put(getFailureAction(e))\n  }\n}\n\nexport default function* newsSaga() {\n  yield takeEvery(ActionTypes.GET_NEWS, getCatalogNews)\n}\n","export enum NewsFormModes {\n  AddNews = \"Add News\",\n  EditNews = \"Edit News\",\n}\n\nexport enum NewsFormButtons {\n  AddNews = \"Add News\",\n  EditNews = \"Edit News\",\n}\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\"\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"& > *\": {\n        // width: \"30vw\",\n        // display: \"grid\",\n        // height: \"8vh\",\n        // margin: \"0 auto\",\n      },\n    },\n  })\n)\n\nexport default useStyles\n","import React from \"react\"\nimport { Field, Form, ErrorMessage } from \"formik\"\nimport { Button } from \"@material-ui/core\"\nimport useStyles from \"./NewsFormUseStyles\"\nimport { TextField } from \"formik-material-ui\"\n\ntype NewsFormRenderProps = {\n  modalNewsToggle: string | null,\n}\n\nconst NewsFormRender: React.FC<NewsFormRenderProps> = ({ modalNewsToggle }) => {\n  const classes = useStyles()\n\n  return (\n    <Form className={`${classes.root} form-news`}>\n      <Field name=\"title\" label=\"title\" component={TextField} />\n      <ErrorMessage name=\"title\" />\n      <Field name=\"date\" label=\"date\" disabled component={TextField} />\n      <ErrorMessage name=\"date\" />\n      <Field name=\"explanation\" label=\"explanation\" component={TextField} />\n      <ErrorMessage name=\"explanation\" />\n      <Field name=\"url\" label=\"url\" component={TextField} />\n      <ErrorMessage name=\"url\" />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        type=\"submit\"\n      >{`${modalNewsToggle}`}</Button>\n    </Form>\n  )\n}\n\nexport default NewsFormRender\n","import React from \"react\"\nimport { Formik } from \"formik\"\nimport NewsFormRender from \"./NewsFormRender/NewsFormRender\"\nimport { NewsFormModes } from \"../../shared/constants/user-from-view-mode.enum\"\nimport { newsInterface } from \"../../Redux/InterfacesEntity/news.interface\"\nimport getDate from \"../../services/getDate\"\nimport {\n  editNewsByID,\n  addNewsInCatalog,\n  toggleModalNews,\n  setCountNewsID,\n} from \"../../Redux/store/news/news.actions\"\n\ntype NewsFormProps = {\n  chosenNews: newsInterface,\n  modalNewsToggle: string | null,\n  countNewsID: number,\n  dispatch: any,\n}\n\nconst NewsForm: React.FC<NewsFormProps> = ({\n  chosenNews,\n  modalNewsToggle,\n  countNewsID,\n  dispatch,\n}) => {\n  const idNews = chosenNews.id || countNewsID + 1\n  const editStatus = modalNewsToggle === NewsFormModes.EditNews\n\n  return (\n    <>\n      <Formik\n        initialValues={{\n          title: editStatus ? chosenNews.title : \"\",\n          date: editStatus ? chosenNews.date : getDate(new Date()),\n          explanation: editStatus ? chosenNews.explanation : \"\",\n          url: editStatus ? chosenNews.url : \"\",\n        }}\n        onSubmit={(values: any) => {\n          if (modalNewsToggle === NewsFormModes.EditNews)\n            dispatch(editNewsByID({ ...values, id: idNews }))\n          if (modalNewsToggle === NewsFormModes.AddNews) {\n            dispatch(addNewsInCatalog({ ...values, id: idNews }))\n            dispatch(setCountNewsID(countNewsID + 1))\n          }\n          dispatch(toggleModalNews(null))\n        }}\n      >\n        <NewsFormRender modalNewsToggle={modalNewsToggle} />\n      </Formik>\n    </>\n  )\n}\n\nexport default NewsForm\n","import React from \"react\"\nimport { Box, Typography } from \"@material-ui/core\"\nimport { newsInterface } from \"../../Redux/InterfacesEntity/news.interface\"\nimport { connect } from \"react-redux\"\nimport { toggleModalNews } from \"../../Redux/store/news/news.actions\"\nimport NewsForm from \"../../Components/NewsForm/NewsForm\"\n\ntype ModalWindowProps = {\n  modalNewsToggle: string | null,\n  chosenNews: newsInterface,\n  countNewsID: number,\n  dispatch: any,\n}\n\nconst ModalWindow: React.FunctionComponent<ModalWindowProps> = ({\n  modalNewsToggle,\n  chosenNews,\n  countNewsID,\n  dispatch,\n}) => {\n  return (\n    <>\n      {modalNewsToggle && (\n        <Box\n          component={\"div\"}\n          className={`modal-window-container`}\n          onClick={() => dispatch(toggleModalNews(null))}\n        >\n          <Box\n            component={\"div\"}\n            className={\"modal-news-container\"}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <Box component={\"div\"} className={\"modal-news-container__header\"}>\n              <Typography variant=\"h6\" gutterBottom>\n                {modalNewsToggle}\n              </Typography>\n            </Box>\n            <Box\n              component={\"div\"}\n              className={\"modal-news-container__form-container\"}\n            >\n              <NewsForm\n                chosenNews={chosenNews}\n                modalNewsToggle={modalNewsToggle}\n                countNewsID={countNewsID}\n                dispatch={dispatch}\n              />\n            </Box>\n          </Box>\n        </Box>\n      )}\n    </>\n  )\n}\n\nconst mapStateToProps = (state: any) => ({\n  modalNewsToggle: state.news.modalNewsToggle,\n  chosenNews: state.news.chosenNews,\n  countNewsID: state.news.countNewsID,\n})\n\nexport default connect(mapStateToProps)(ModalWindow)\n","import React from \"react\"\nimport \"./App.scss\"\nimport NewsPage from \"./Pages/NewsPage/NewsPage\"\nimport { Provider } from \"react-redux\"\nimport createSagaMiddleware from \"redux-saga\"\nimport { createStore, applyMiddleware } from \"redux\"\nimport { composeWithDevTools } from \"redux-devtools-extension\"\nimport rootReducer from \"./Redux/index\"\nimport newsSaga from \"./Redux/store/news/news.sagas\"\nimport { AppBar, Box, Typography } from \"@material-ui/core\"\nimport ScopedCssBaseline from \"@material-ui/core/ScopedCssBaseline\"\nimport ModalWindow from \"./Components/ModalWindow/ModalWindow\"\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools({ trace: true, traceLimit: 25 })(\n    applyMiddleware(sagaMiddleware)\n  )\n)\n\nsagaMiddleware.run(newsSaga)\n\nconst App: React.FC = () => (\n  <Provider store={store}>\n    <ScopedCssBaseline>\n      <Box component=\"div\" className={\"wrapper\"}>\n        <ModalWindow />\n        <AppBar className={\"navbar\"}>\n          <Typography variant=\"h4\" component=\"h2\" gutterBottom>\n            {\"Navbar\"}\n          </Typography>\n        </AppBar>\n        <Box component=\"div\" className={\"main\"}>\n          <NewsPage />\n        </Box>\n      </Box>\n    </ScopedCssBaseline>\n  </Provider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}